#!/usr/bin/env python
import argparse
import logging
import os
from parcel import manifest, HTTPClient, UDTClient
from parcel.log import get_logger

logging.root.setLevel(logging.INFO)
log = get_logger('parcel_client')

HTTP = 'http'
UDT = 'udt'
TCP_DEFAULT_N_THREADS = 8
UDT_DEFAULT_N_THREADS =8


def get_client(args, token):
    kwargs = dict(
        token=token,
        n_procs=args.n_processes,
        directory=args.dir,
        segment_md5sums=args.segment_md5sums,
        debug=args.debug
    )
    if args.mode == UDT:
        return UDTClient(
            proxy_host=args.proxy_host,
            proxy_port=args.proxy_port,
            remote_uri=args.server.pop(0),
            external_proxy=args.external_proxy,
            **kwargs
        )
    elif args.mode == HTTP:
        return HTTPClient(
            uri=args.server.pop(0),
            **kwargs
        )
    raise RuntimeError('Unknown functionality.')


def main(args):
    # Set verbosty
    if args.verbose:
        logging.root.setLevel(logging.DEBUG)
    # Create client
    client = get_client(args, args.token)
    # Create file list and remove duplicates
    file_ids = set([f['id'] for f in args.manifest] + args.file_ids)
    # Download files
    client.download_files(file_ids)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    general_parser = argparse.ArgumentParser(add_help=False)
    subparsers = parser.add_subparsers(help='Download using UDT or HTTP',
                                       dest='mode')

    #############################################################
    #                     General options
    #############################################################

    general_parser.add_argument('-m', '--manifest',
                                type=manifest.argparse_type,
                                default=list(),
                                help='GDC Download manifest file.')
    general_parser.add_argument('-v', '--verbose', action='store_true',
                                help='verbose logging')
    general_parser.add_argument('-d', '--dir',
                                default=os.path.abspath(os.getcwd()),
                                help='Directory to download files to. '
                                'Defaults to current dir')
    general_parser.add_argument('server', metavar='server', type=str, nargs=1,
                                help='The parcel server udt address server[:port]')
    general_parser.add_argument('file_ids', metavar='file_id', type=str,
                                nargs='*', help='uuids to download')
    general_parser.add_argument('--no-segment-md5sums', dest='segment_md5sums',
                                action='store_false',
                                help='Calculate inbound segment md5sums and/or verify md5sums on restart')
    general_parser.add_argument('--debug', dest='debug',
                                action='store_true',
                                help='Print stack traces')

    token_args = general_parser.add_mutually_exclusive_group(required=False)
    token_args.add_argument('-t', '--token-file',
                            type=lambda x: argparse.FileType('r')(x).read(),
                            dest='token',
                            help='authentication token file')
    token_args.add_argument('-T', '--token', default='', type=str,
                            dest='token', help='authentication token')

    #############################################################
    #                       UDT options
    #############################################################

    udt = subparsers.add_parser(UDT, help='Download files via UDT',
                                parents=[general_parser])
    udt.add_argument('-i', '--proxy-host', default='localhost', type=str,
                     dest='proxy_host',
                     help='The port to bind the local proxy to')
    udt.add_argument('-p', '--proxy-port', default='9000', type=str,
                     dest='proxy_port',
                     help='The port to bind the local proxy to')
    udt.add_argument('-e', '--external-proxy', action='store_true',
                     dest='external_proxy',
                     help='Do not create a local proxy but bind to an external one')
    udt.add_argument('-n', '--n-processes', type=int,
                     default=UDT_DEFAULT_N_THREADS,
                     help='Number of udt client connections.')

    #############################################################
    #                      HTTP options
    #############################################################

    http = subparsers.add_parser(HTTP, help='Download files via HTTP',
                                 parents=[general_parser])
    http.add_argument('-n', '--n-processes', type=int,
                      default=TCP_DEFAULT_N_THREADS,
                      help='Number of tcp client connections.')

    #############################################################
    #                       Start client
    #############################################################

    args = parser.parse_args()
    main(args)
