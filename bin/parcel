#!/usr/bin/env python
import argparse
import parcel
import logging

from parcel import manifest
from parcel.log import get_logger


logging.root.setLevel(logging.INFO)
log = get_logger('parcel_client')


def load_token(args):
    if args.token_file:
        with open(args.token_file, 'r') as f:
            return f.read()
    else:
        return args.token

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('file_ids', metavar='file_id', type=str, nargs='*',
                        help='uuids to download')
    parser.add_argument('-m', '--manifest', type=manifest.argparse_type,
                        default=list(),
                        help='GDC Download manifest file.')
    parser.add_argument('-n', '--n-threads', type=int, default=4,
                        help='Number of encryption threads.')
    parser.add_argument('-p', '--port', default=9000, type=str,
                        help='parcel server port')
    parser.add_argument('-i', '--host', default='localhost', type=str,
                        help='parcel server port')
    parser.add_argument('-v', '--verbose', action='store_true',
                        help='verbose logging')
    parser.add_argument('-d', '--dir', default=None,
                        help='Directory to download files to. '
                        'Defaults to current dir')

    # Add token args
    token_args = parser.add_mutually_exclusive_group(required=False)
    token_args.add_argument('-t', '--token-file', default='', type=str,
                            help='authentication token file')
    token_args.add_argument('-T', '--token', default='', type=str,
                            help='authentication token')

    args = parser.parse_args()

    # Set verbosty
    if args.verbose:
        logging.root.setLevel(logging.DEBUG)

    # Get token for authentication
    token = load_token(args)

    # Create client
    client = parcel.Client(
        token,
        host=args.host,
        port=args.port,
        n_enc_threads=args.n_threads
    )

    # Create file list
    file_ids = [f['uuid'] for f in args.manifest] + args.file_ids

    # Download files to current directory
    client.download_files(file_ids, directory=args.dir)
